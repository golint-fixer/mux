package blah(type a byte, type b, type c)

// Handler handles commands
type Handler interface {
	Handle(in b, out c)
}

// New returns a new handler
func New(h map[a]Handler) *Mux {
  if h == nil {
    h = map[a]Handler{}
  }

  m := Mux{
    Handlers: h,
  }

  return &m
}

// Mux handles choosing handlers for the given command
// in the request
type Mux struct {
	Handlers map[a]Handler
}

// HandleWith sets the handler for a given command
func (m *Mux) HandleWith(s a, h Handler) {
	m.Handlers[s] = h
}

// HasHandler checks that the mux has a handler for
// that string
func (m *Mux) HasHandler(s a) bool {
	_, ok := m.Handlers[s]

	return ok
}

// Select tell the mux to select and run the command
func (m *Mux) Select(s a, in b, out c) bool {
	h, ok := m.Handlers[s]

	if ok {
		h.Handle(in, out)
		return true
	}

	return false
}
